use std::fmt;

pub enum Token {
    Unknown,

    // One-symbol operators
    Lt,
    Gt,
    Plus,
    Minus,
    Percent,
    Mul,
    Div,
    LBracket,
    RBracket,
    LSqBracket,
    RSqBracket,
    LCrlBracket,
    RCrlBracket,
    Assign,
    Comma,
    Eof,

    // General
    Identifier,
    IntegerNum(i64),
    FloatNum(f64),
    String(String),

    // Operators
    Equal,
    NotEqual,
    LessEqual,
    GreaterEqual,
    StarStar,
    DashDash,
    MulMul,
    DivDiv,
    True,
    False,
    None,

    // Keywords
    LogicalOr,
    LogicalAnd,
    LogicalNot,
    In,
    Is,
    For,
    Endfor,
    If,
    Else,
    ElIf,
    EndIf,
    Block,
    EndBlock,
    Extends,
    Macro,
    EndMacro,
    Call,
    EndCall,
    Filter,
    EndFilter,
    Set,
    EndSet,
    Include,
    Import,
    Recursive,
    Scoped,
    With,
    EndWith,
    Without,
    Ignore,
    Missing,
    Context,
    From,
    As,
    Do,

    // Template control
    CommentBegin,
    CommentEnd,
    RawBegin,
    RawEnd,
    StmtBegin,
    StmtEnd,
    ExprBegin,
    ExprEnd,
}

impl fmt::Display for Token {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Token::Unknown => write!(f, "<<Unknown>>"),
            Token::Lt => write!(f, "<"),
            Token::Gt => write!(f, ">"),
            Token::Plus => write!(f, "+"),
            Token::Minus => write!(f, "-"),
            Token::Percent => write!(f, "%"),
            Token::Mul => write!(f, "*"),
            Token::Div => write!(f, "/"),
            Token::LBracket => write!(f, "("),
            Token::RBracket => write!(f, ")"),
            Token::LSqBracket => write!(f, "["),
            Token::RSqBracket => write!(f, "]"),
            Token::LCrlBracket => write!(f, "{{"),
            Token::RCrlBracket => write!(f, "}}"),
            Token::Assign => write!(f, "="),
            Token::Comma => write!(f, ","),
            Token::Eof => write!(f, "<<End of block>>"),
            Token::IntegerNum(num) => write!(f, "{}", num),
            Token::FloatNum(num) => write!(f, "{}", num),
            Token::String(s) => write!(f, "{}", s),
            Token::Identifier => write!(f, "{}", "{{}}"),
            Token::Equal => write!(f, "=="),
            Token::NotEqual => write!(f, "!="),
            Token::LessEqual => write!(f, "<="),
            Token::GreaterEqual => write!(f, ">="),
            Token::StarStar => write!(f, "**"),
            Token::DashDash => write!(f, "//"),
            Token::LogicalOr => write!(f, "or"),
            Token::LogicalAnd => write!(f, "and"),
            Token::LogicalNot => write!(f, "not"),
            Token::MulMul => write!(f, "**"),
            Token::DivDiv => write!(f, "//"),
            Token::True => write!(f, "true"),
            Token::False => write!(f, "false"),
            Token::None => write!(f, "none"),
            Token::In => write!(f, "in"),
            Token::Is => write!(f, "is"),
            Token::For => write!(f, "for"),
            Token::Endfor => write!(f, "endfor"),
            Token::If => write!(f, "if"),
            Token::Else => write!(f, "else"),
            Token::ElIf => write!(f, "elif"),
            Token::EndIf => write!(f, "endif"),
            Token::Block => write!(f, "block"),
            Token::EndBlock => write!(f, "endblock"),
            Token::Extends => write!(f, "extends"),
            Token::Macro => write!(f, "macro"),
            Token::EndMacro => write!(f, "endmacro"),
            Token::Call => write!(f, "call"),
            Token::EndCall => write!(f, "endcall"),
            Token::Filter => write!(f, "filter"),
            Token::EndFilter => write!(f, "endfilter"),
            Token::Set => write!(f, "set"),
            Token::EndSet => write!(f, "endset"),
            Token::Include => write!(f, "include"),
            Token::Import => write!(f, "import"),
            Token::Recursive => write!(f, "recursive"),
            Token::Scoped => write!(f, "scoped"),
            Token::With => write!(f, "with"),
            Token::EndWith => write!(f, "endwith"),
            Token::Without => write!(f, "without"),
            Token::Ignore => write!(f, "ignore"),
            Token::Missing => write!(f, "missing"),
            Token::Context => write!(f, "context"),
            Token::From => write!(f, "form"),
            Token::As => write!(f, "as"),
            Token::Do => write!(f, "do"),
            Token::RawBegin => write!(f, "{{% raw %}}"),
            Token::RawEnd => write!(f, "{{% endraw %}}"),
            Token::CommentBegin => write!(f, "#"),
            Token::CommentEnd => write!(f, "#}}"),
            Token::StmtBegin => write!(f, "{{%"),
            Token::StmtEnd => write!(f, "%}}"),
            Token::ExprBegin => write!(f, "{{{{"),
            Token::ExprEnd => write!(f, "}}}}"),
        }
    }
}
